# -*- coding: utf-8 -*-
"""
Created on Sun Apr  2 12:38:47 2023

@author: jwill

To Do List: 
    
1 Create a list of best values, Lamda even if not selected. Can reuse these for
the next round. 

Check that this is good in the m method 

2. Streamline wavelet transform (remove partial)

3. Consider partial idwt for solver. Probably won't work. Can possibly store 
previous level wavelet values. Could effect repetitions

"""
import numpy as np 
import pywt 
from scipy.optimize import differential_evolution
import copy
from scipy.stats import qmc
from hmmlearn import hmm

#global BE; global BO; global coeffsE; global coeffsO; global E; global O; global StatesE; global StatesO
def mplus(signal):
    sig = np.hstack(signal)
    sig_length = np.size(sig)
    print(sig_length)
    #wave_levels = int(np.round(np.log2(sig_length)-4)-1)
    #print(wave_levels)
    wave_levels=4
    Lam = np.zeros([wave_levels])
    LamH = np.zeros([wave_levels,2])
    vhmm = np.zeros([wave_levels,2])
    vM = np.zeros([wave_levels])
    #who won 
    LWin = np.zeros([wave_levels,3])
    e, o = Split1D(sig)
    '''
    (ecA1, ecD1) = pywt.dwt(e, 'db8', mode='symmetric')
    (ecA2, ecD2) = pywt.dwt(ecA1, 'db8',mode='symmetric')
    (ecA3, ecD3) = pywt.dwt(ecA2, 'db8',mode='symmetric')
    (ecA4, ecD4) = pywt.dwt(ecA3, 'db8',mode='symmetric')
    (ecA5, ecD5) = pywt.dwt(ecA4, 'db8',mode='symmetric')
    (ocA1, ocD1) = pywt.dwt(o, 'db8',mode='symmetric')
    (ocA2, ocD2) = pywt.dwt(ocA1, 'db8',mode='symmetric')
    (ocA3, ocD3) = pywt.dwt(ocA2, 'db8',mode='symmetric')
    (ocA4, ocD4) = pywt.dwt(ocA3, 'db8',mode='symmetric')
    (ocA5, ocD5) = pywt.dwt(ocA4, 'db8',mode='symmetric')
    coeffsE = [ecA4, ecD4, ecD3, ecD2, ecD1]
    coeffsO = [ocA4, ocD4, ocD3, ocD2, ocD1]
    '''
    coeffsE = pywt.wavedec(e,'db8',level=4)
    coeffsO = pywt.wavedec(o,'db8',level=4)
    #print(wave_levels,np.shape(coeffsE))
    BE, BO, val = Bins(coeffsE,coeffsO)
    G = np.max(np.hstack(val))
    M, StatesE, StatesO = Mod(BE, BO, 2)
    fun = 10000000000
    for iteration in range(1):
        for j in range(wave_levels-1,-1,-1):
            #args = BE, BO, coeffsE, coeffsO, e, o, j, StatesE, StatesO
            #Create the input to DE below 
            bounds = [[0,3*G],[0,3*G]]
            sampler = qmc.LatinHypercube(d=2,)
            sample = sampler.random(n=10)
            minH = np.percentile(val[j],80)
            init = qmc.scale(sample,[0,0],[G,G])
            init2 = qmc.scale(sample,[minH,minH],[1.5*G,1.5*G])
            init3 = np.vstack([[0,0],init,init2])
            #Calculate the M lamda values 
            tg, tgfun = brutesolver(BE,BO, coeffsE, coeffsO, e, o, j, val,G)
            #Calculate the HMM lamda values 
            deg_result = differential_evolution(HMMBins, bounds, args=(tg, sig, BE, BO, coeffsE, coeffsO, e, o, j, StatesE, StatesO),init = init3, updating = 'immediate',x0 =[tg,tg], maxiter=10000)
            #Choose the best value for lamda M or HMM
            if deg_result['fun']<tgfun and deg_result['fun']<fun:
                LamH[j] = deg_result['x']
                fun = deg_result['fun']
                if LamH[j,0] >= np.max(val[j]):
                    vhmm[j,0] = 1
                if LamH[j,1] >= np.max(val[j]):
                    vhmm[j,1] = 1
                LWin[j] = [1,0,0]
                #need if maxed out 
                coeffsE, coeffsO, BE, BO = newcoeffsH(coeffsE,  coeffsO, BE,BO,j, LamH, StatesE, StatesO)
            elif tgfun<=fun:
                Lam[j] = tg
                fun = tgfun
                if tg >= np.max(val[j]):
                    vM[j] = 1
                LWin[j] = [0,1,0]
                coeffsE, coeffsO, BE, BO = newcoeffs(coeffsE, coeffsO, BE,BO,j, Lam)
            else:
                Lam[j] = Lam[j-1]
                vhmm[j] = [0,0]
                LWin[j] = [0,0,1]
                coeffsE, coeffsO, BE, BO = newcoeffs(coeffsE, coeffsO, BE,BO,j, Lam)
                #print("previous L win")
        '''
        #Level dependent checks 
        Many options here...thinking stick with original methodology and just try to converge
        at that level to see how we do. Start at Lj-1 again 
       '''
        for j in range(wave_levels-1,-1,-1):
       
            tg, tgfun = brutesolverL(BE,BO, coeffsE, coeffsO, e, o, j, val,G)
            #Calculate the HMM lamda values 
            deg_result = differential_evolution(HMMBinsL, bounds, args=(sig, BE, BO, coeffsE, coeffsO, e, o, j, StatesE, StatesO),init = init3, updating = 'immediate',x0 =[tg,tg], maxiter=10000)
            print(fun, tgfun, deg_result['fun'])
            if deg_result['fun']<tgfun and deg_result['fun']<fun:
                LamH[j] = deg_result['x']
                fun = deg_result['fun']
                if LamH[j,0] >= np.max(val[j]):
                    vhmm[j,0] = 1
                if LamH[j,1] >= np.max(val[j]):
                    vhmm[j,1] = 1
                LWin[j] = [1,0,0]
                #need if maxed out 
                coeffsE, coeffsO, BE, BO = newcoeffsH(coeffsE,  coeffsO, BE,BO,j, LamH, StatesE, StatesO)
            elif tgfun<=fun:
                Lam[j] = tg
                fun = tgfun
                if tg >= np.max(val[j]):
                    vM[j] = 1
                LWin[j] = [0,1,0]
                coeffsE, coeffsO, BE, BO = newcoeffs(coeffsE, coeffsO, BE,BO,j, Lam)
    r,coeffs = rebuild(sig, Lam, LamH, wave_levels, M, coeffsE,vM, vhmm, LWin)
    print(vhmm)
    print(vM)
    print(LWin)
    return r
    

def GBins(test, BE, BO, coeffsE, coeffsO, e, o, j):
    Lg = test
    for p in range(j,-1,-1):
        BEn = copy.deepcopy(BE); BOn = copy.deepcopy(BO);
        for block in range(np.shape(BE[p])[0]):
            if np.sum(BEn[p][block]**2)<Lg:
                BEn[p][block]=0*BEn[p][block]
            if np.sum(BOn[p][block]**2)<Lg:
                BOn[p][block]=0*BOn[p][block]
        flatE = np.hstack(BEn[p])
        flatO = np.hstack(BOn[p])
        diff = np.size(flatE)-np.size(coeffsE[p+1])
        if diff>0:
            flatE = flatE[:(np.size(flatE)-diff)]
            flatO = flatO[:(np.size(flatO)-diff)]
        coeffsE[p+1] = flatE
        coeffsO[p+1] = flatO
    rE = pywt.waverec(coeffsE,'db8'); rO = pywt.waverec(coeffsO,'db8')
    ORec = [np.mean(rE[i:i+2]) for i in range(np.size(rO)-1)]; ERec = [np.mean(rO[i:i+2]) for i in range(np.size(rO)-1)]
    ERec = np.asarray(ERec); ORec = np.asarray(ORec)
    SQt = .5*(np.sum((ORec-o[:np.size(o)-1])**2)+np.sum((ERec-e[1:])**2)) + .5*(np.sum((ERec-ORec)**2))
    return SQt

def GBinsL(test, BE, BO, coeffsE, coeffsO, e, o, j):
    Lg = test
    p=j
    BEn = copy.deepcopy(BE); BOn = copy.deepcopy(BO);
    for block in range(np.shape(BE[p])[0]):
        if np.sum(BEn[p][block]**2)<Lg:
            BEn[p][block]=0*BEn[p][block]
        if np.sum(BOn[p][block]**2)<Lg:
            BOn[p][block]=0*BOn[p][block]
    flatE = np.hstack(BEn[p])
    flatO = np.hstack(BOn[p])
    diff = np.size(flatE)-np.size(coeffsE[p+1])
    if diff>0:
        flatE = flatE[:(np.size(flatE)-diff)]
        flatO = flatO[:(np.size(flatO)-diff)]
    coeffsE[p+1] = flatE
    coeffsO[p+1] = flatO
    rE = pywt.waverec(coeffsE,'db8'); rO = pywt.waverec(coeffsO,'db8')
    ORec = [np.mean(rE[i:i+2]) for i in range(np.size(rO)-1)]; ERec = [np.mean(rO[i:i+2]) for i in range(np.size(rO)-1)]
    ERec = np.asarray(ERec); ORec = np.asarray(ORec)
    SQt = .5*(np.sum((ORec-o[:np.size(o)-1])**2)+np.sum((ERec-e[1:])**2)) + .5*(np.sum((ERec-ORec)**2))
    return SQt
    
def rebuild(signal, lam, lamh, wave_lengths, Mod, coeffsE,vM, vhmm, LWin):
    '''
    (cA1, cD1) = pywt.dwt(signal, 'db8', mode='symmetric')
    (cA2, cD2) = pywt.dwt(cA1, 'db8',mode='symmetric')
    (cA3, cD3) = pywt.dwt(cA2, 'db8',mode='symmetric')
    (cA4, cD4) = pywt.dwt(cA3, 'db8',mode='symmetric')
    (cA5, cD5) = pywt.dwt(cA4, 'db8',mode='symmetric')
    coeffs = [cA4, cD4, cD3, cD2, cD1]
    '''
    coeffs = pywt.wavedec(signal,'db8',level=4)
    #print(np.shape(coeffs))
    for j in range(1,wave_lengths+1):
        w = int(np.round(np.log(np.size(coeffsE[j]))))
        #w = int(round(2*np.log(np.size(coeffsE[j]))))
        L =  ((1-(np.log10(2)/np.log10(np.size(signal)/2**(j))))**(-1))*lam[j-1]
        Lmin1 = ((1-(np.log10(2)/np.log10(np.size(signal)/2**(j))))**(-1))*lam[j-2]
        #if lamh[j-1,0] == 0 and lamh[j-1,1] == 0:   
        if LWin[j-1,1] == 1:
            for block in range(0,np.size(coeffs[j])+w,w):
                end = np.size(coeffs[j])-(block+w)
                if end < 0:
                    w = w+end
                val = np.sum((coeffs[j][block:block+w])**2)
                if  val <= L or vM[j-1]==1:
                    coeffs[j][block:block+w]=coeffs[j][block:block+w]*0 
        elif LWin[j-1,0]==1: 
            L1 = ((1-(np.log10(2)/np.log10(np.size(signal)/2**(j))))**(-1))*lamh[j-1,0]
            L2 = ((1-(np.log10(2)/np.log10(np.size(signal)/2**(j))))**(-1))*lamh[j-1,1]
            #print(np.size(coeffs[j]))
            for block in range(0,np.size(coeffs[j])+w,w):
                end = np.size(coeffs[j])-(block+w)
                if end < 0:
                    block = block-(w-end)+2
                #print(coeffs[j][block:block+w])
                state = Mod[j-1].predict([coeffs[j][block:block+w]])
                if state==0:
                    t = np.sum(np.abs(coeffs[j][block:block+w]))
                    if t <= L1 or vhmm[j-1,0]==1:
                        coeffs[j][block:block+w]=0*coeffs[j][block:block+w]
                if state==1:
                    t = np.sum((coeffs[j][block:block+w])**2)
                    if t <= L2 or vhmm[j-1,1]==1:
                        coeffs[j][block:block+w]=0*coeffs[j][block:block+w]
        else:
            for block in range(0,np.size(coeffs[j])+w,w):
                end = np.size(coeffs[j])-(block+w)
                if end < 0:
                    w = w+end
                val = np.sum((coeffs[j][block:block+w])**2)
                if  val <= L or vM[j-2]==1:
                    coeffs[j][block:block+w]=coeffs[j][block:block+w]*0 
    return pywt.waverec(coeffs,'db8').T, coeffs

#######################################################################
#suspicious here check to make sure we aren't wiping out hmm results
#This should be j--->Jn-1
#Needs fix we are just thresholding level j 
#The problem is we are looking at this a bit parochiarly and not impacting, th
#other resolution levels 
#######################################################################3
       
def newcoeffs(coeffsE, coeffsO, BE,BO,j,lam):
    for block in range(np.shape(BE[j])[0]):
        if np.sum(BE[j][block]**2) <= lam[j]:
            BE[j][block] = 0*BE[j][block]
        if np.sum(BO[j][block]**2) <= lam[j]:
            BO[j][block] = 0*BO[j][block]
    flatE = np.hstack(BE[j])
    flatO = np.hstack(BO[j])
    diff = np.size(flatE)-np.size(coeffsE[j+1])
    if diff>0:
        flatE = flatE[:(np.size(flatE)-diff)]
        flatO = flatO[:(np.size(flatO)-diff)]
    coeffsE[j+1] = flatE
    coeffsO[j+1] = flatO
    return coeffsE, coeffsO, BE, BO



def Bins(coeffsE, coeffsO):
    BE = []; BO = []; Mod = []
    Val = []
    for j in range(1,np.shape(coeffsE)[0]):
        valE = []; valO = [];
        j_length = np.size(coeffsE[j])
        w = int(np.round(np.log(np.size(coeffsE[j]))))
        BlocksE = []; BlocksO = []
        for i in range(0,j_length,w):
            if (i+w)>j_length:
                start = i-((i+w)-j_length)
                BlocksE.append(np.asarray(coeffsE[j][start:start+w]))
                BlocksO.append(np.asarray(coeffsO[j][start:start+w]))
            else:
                BlocksE.append(np.asarray(coeffsE[j][i:i+w]))
                BlocksO.append(np.asarray(coeffsO[j][i:i+w]))
            valE.append(np.sum(np.abs(coeffsE[j][i:i+w])))
            valO.append(np.sum(np.abs(coeffsO[j][i:i+w])))
        Val.append(np.sort(np.hstack([valE, valO])))
        BE.append(BlocksE)
        BO.append(BlocksO)
    return BE, BO, Val

def Split1D(signal):
    E = signal[::2]
    O = signal[1::2]
    return E, O;

def brutesolver(BE,BO,coeffsE,coeffsO,e,o,j,val,G):
    #function to evaluate
    V = []
    mini = 1000000000000000000
    i = 0
    p = [val[j][it] for it in range(np.shape(val[j])[0])]
    jval = np.append([p],[G,2*G,3*G])
    for test in jval:
        temp = GBins(test, BE, BO, coeffsE, coeffsO, e, o, j)
        if temp <= mini : 
            mini = temp
            mini_x = test
    return mini_x, mini

def brutesolverL(BE,BO,coeffsE,coeffsO,e,o,j,val,G):
    #function to evaluate
    V = []
    mini = 1000000000000000000
    i = 0
    p = [val[j][it] for it in range(np.shape(val[j])[0])]
    jval = np.append([p],[G,2*G,3*G])
    for test in jval:
        temp = GBinsL(test, BE, BO, coeffsE, coeffsO, e, o, j)
        if temp <= mini : 
            mini = temp
            mini_x = test
    return mini_x, mini

def Mod(BE, BO, components): 
    ModE = []; StatesE = []; StatesO = [];
    for j in range(np.shape(BE)[0]):
        mode = hmm.GaussianHMM(n_components=2, tol=4, verbose=True)
        #mode = hmm.GaussianHMM(n_components=components,n_iter=10000)
        B = np.concatenate([BE[j],BO[j]])
        mode.fit([B[m] for m in range(np.shape(B)[0])])
        tempE = np.asarray(np.hstack(mode.predict([(BE[j][m]) for m in range(np.shape(BE[j])[0])])));
        #print(tempE)
        tempO = np.asarray(np.hstack(mode.predict([(BO[j][m]) for m in range(np.shape(BO[j])[0])])));
        ModE.append(mode)
        StatesE.append(tempE)
        StatesO.append(tempO)
        #StatesO.append(tempE)
    return ModE, StatesE, StatesO 

def HMMBins(L,tg, sig, BE, BO, coeffsE, coeffsO, e, o, j, SE, SO):
    Lg = tg; H1 = L[0]; H2 = L[1]
    BEn = copy.deepcopy(BE); BOn = copy.deepcopy(BO);
    for p in range(j,-1,-1):
        if p == j: 
            for block in range(np.shape(BE[p])[0]):
                if SE[p][block] == 0:
                    if np.sum(np.abs(BEn[p][block]))<H1:
                        BEn[p][block]=0*BEn[p][block]
                if SO[p][block] == 0:
                    if np.sum(np.abs(BOn[p][block]))<H1:
                        BOn[p][block]=0*BOn[p][block]
                if SE[p][block] == 1:
                    if np.sum(np.abs(BE[p][block]))<H2:
                        BEn[p][block]=0*BEn[p][block]
                if SO[p][block] == 1:
                    if np.sum(np.abs(BOn[p][block]))<H2:
                        BOn[p][block]=0*BOn[p][block]
        else:
            for block in range(np.shape(BE[p])[0]):
                if np.sum(BEn[p][block]**2)<Lg:
                    BEn[p][block]=0*BEn[p][block]
                if np.sum(BOn[p][block]**2)<Lg:
                    BOn[p][block]=0*BOn[p][block]
        flatE = np.hstack(BEn[p])
        flatO = np.hstack(BOn[p])
        diff = np.size(flatE)-np.size(coeffsE[p+1])
        if diff>0:
            flatE = flatE[:(np.size(flatE)-diff)]
            flatO = flatO[:(np.size(flatO)-diff)]
        coeffsE[p+1] = flatE
        coeffsO[p+1] = flatO
    rE = pywt.waverec(coeffsE,'db8'); rO = pywt.waverec(coeffsO,'db8')
    ORec = [np.mean(rE[i:i+2]) for i in range(np.size(rO)-1)]; ERec = [np.mean(rO[i:i+2]) for i in range(np.size(rO)-1)]
    ERec = np.asarray(ERec); ORec = np.asarray(ORec)
    #SQt = (np.sum((ORec-o[:np.size(o)-1])**2) +  np.sum((ERec-e[1:])**2))+.5*np.sum((ERec-ORec)**2)
    #part1 = np.sum((ORec-o[:np.size(o)-1])**2)/eo
    #part2 = np.sum((ERec-e[1:])**2)/eo
    #curv = np.sum(np.sum(np.diff(np.diff(ERec))**2) + np.sum(np.diff(np.diff(ORec))**2))/np.sum((np.diff(np.diff(sig)))**2)
    #SQt = part1 + part2 + np.sum((ERec-ORec)**2)/eo + curv
    SQt = .5*(np.sum((ORec-o[:np.size(o)-1])**2)+np.sum((ERec-e[1:])**2)) + .5*(np.sum((ERec-ORec)**2))
    #lam = np.sum((rE-O)**2)+np.sum((rO-E)**2)
    return SQt

def HMMBinsL(L, sig, BE, BO, coeffsE, coeffsO, e, o, j, SE, SO):
    H1 = L[0]; H2 = L[1]
    BEn = copy.deepcopy(BE); BOn = copy.deepcopy(BO);
    p = j
    for block in range(np.shape(BE[p])[0]):
        if SE[p][block] == 0:
            if np.sum(np.abs(BEn[p][block]))<H1:
                BEn[p][block]=0*BEn[p][block]
        if SO[p][block] == 0:
            if np.sum(np.abs(BOn[p][block]))<H1:
                BOn[p][block]=0*BOn[p][block]
        if SE[p][block] == 1:
            if np.sum(np.abs(BE[p][block]))<H2:
                BEn[p][block]=0*BEn[p][block]
        if SO[p][block] == 1:
            if np.sum(np.abs(BOn[p][block]))<H2:
                BOn[p][block]=0*BOn[p][block]
    flatE = np.hstack(BEn[p])
    flatO = np.hstack(BOn[p])
    diff = np.size(flatE)-np.size(coeffsE[p+1])
    if diff>0:
        flatE = flatE[:(np.size(flatE)-diff)]
        flatO = flatO[:(np.size(flatO)-diff)]
    coeffsE[p+1] = flatE
    coeffsO[p+1] = flatO
    rE = pywt.waverec(coeffsE,'db8'); rO = pywt.waverec(coeffsO,'db8')
    ORec = [np.mean(rE[i:i+2]) for i in range(np.size(rO)-1)]; ERec = [np.mean(rO[i:i+2]) for i in range(np.size(rO)-1)]
    ERec = np.asarray(ERec); ORec = np.asarray(ORec)
    SQt = .5*(np.sum((ORec-o[:np.size(o)-1])**2)+np.sum((ERec-e[1:])**2)) + .5*(np.sum((ERec-ORec)**2))
    return SQt

def newcoeffsH(coeffsE, coeffsO, BE,BO,j,lam, StatesE, StatesO):
    for block in range(np.shape(BE[j])[0]):
        if StatesE[j][block] == 0 and (np.sum(np.abs(BE[j][block])) <= lam[j,0]):
            BE[j][block] = 0*BE[j][block]
        if StatesO[j][block] == 0 and (np.sum(np.abs(BO[j][block])) <= lam[j,0]):
            BO[j][block] = 0*BO[j][block]
        if StatesE[j][block] == 1 and (np.sum(np.abs(BE[j][block])) <= lam[j,1]):
            BE[j][block] = 0*BE[j][block]
        if StatesO[j][block] == 1 and (np.sum(np.abs(BO[j][block])) <= lam[j,1]):
            BO[j][block] = 0*BO[j][block]
    flatE = np.hstack(BE[j])
    flatO = np.hstack(BO[j])
    diff = np.size(flatE)-np.size(coeffsE[j+1])
    if diff>0:
        flatE = flatE[:(np.size(flatE)-diff)]
        flatO = flatO[:(np.size(flatO)-diff)]
    coeffsE[j+1] = flatE
    coeffsO[j+1] = flatO
    return coeffsE, coeffsO, BE, BO
